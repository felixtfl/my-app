{"version":3,"sources":["useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["useLocalStorage","key","defaultValue","useState","window","saved","localStorage","getItem","JSON","parse","getStorageValue","value","setValue","useEffect","setItem","stringify","App","storage","data","setData","fetch","then","response","status","json","console","log","catch","err","PhotoList","lazy","className","fallback","onClick","datalist","sort","Math","random","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAWO,IAAMA,EAAkB,SAACC,EAAKC,GAAkB,IAAD,EAC1BC,oBAAS,WACjC,OAXJ,SAAyBF,EAAKC,GAE5B,GAAsB,qBAAXE,OAAwB,CACjC,IAAMC,EAAQC,aAAaC,QAAQN,GAEnC,OAD0B,OAAVI,EAAiBG,KAAKC,MAAMJ,GAASH,GAO9CQ,CAAgBT,EAAKC,MAFsB,mBAC7CS,EAD6C,KACtCC,EADsC,KAUpD,OALAC,qBAAU,WAERP,aAAaQ,QAAQb,EAAKO,KAAKO,UAAUJ,MACxC,CAACV,EAAKU,IAEF,CAACA,EAAOC,I,uBCiCFI,MAhDf,WACQ,iBAAkBZ,SACtBA,OAAOE,aAAeW,IACtBX,aAAeW,KAHJ,MAKWjB,EAAgB,OAAQ,IALnC,mBAKNkB,EALM,KAKAC,EALA,KAMRD,GACHd,OAAOgB,MAAM,8CAA8CC,MACzD,SAAUC,GACgB,MAApBA,EAASC,OAObD,EAASE,OAAOH,MAAK,SAAUH,GAC7BC,EAAQX,KAAKO,UAAUG,OAPvBO,QAAQC,IAAI,gDACVJ,EAASC,WAUdI,OAAM,SAAUC,GACfH,QAAQC,IAAI,kBAAmBE,MAIrC,IAQMC,EAAYC,gBAAK,kBAAI,gCAE3B,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,WAAD,CAAUC,SAAU,qDAApB,SACA,cAACH,EAAD,CAAWX,KAAMA,MAEjB,uBACA,uBACA,wBAAQa,UAAU,MAAME,QAjBV,WAChB,GAAIf,EAAM,CACR,IAAMgB,EAAW1B,KAAKC,MAAMS,GAC5BgB,EAASC,MAAK,kBAAMC,KAAKC,SAAW,MACpClB,EAAQX,KAAKO,UAAUmB,MAavB,wBCrCSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAW1BZ,M","file":"static/js/main.b6d5e135.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction getStorageValue(key, defaultValue) {\n  // getting stored value\n  if (typeof window !== \"undefined\") {\n    const saved = localStorage.getItem(key);\n    const initial = saved !== null ? JSON.parse(saved) : defaultValue;\n    return initial;\n  }\n}\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const [value, setValue] = useState(() => {\n    return getStorageValue(key, defaultValue);\n  });\n\n  useEffect(() => {\n    // storing input name\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n};","import './App.css';\n// import PhotoList from './PhotoList';\nimport { useLocalStorage } from \"./useLocalStorage\";\nimport storage from 'local-storage-fallback'\nimport { lazy,Suspense} from 'react';\n\nfunction App() {\n  if (!('localStorage' in window)) {\n    window.localStorage = storage;\n    localStorage = storage;\n  }\n  const [data, setData] = useLocalStorage(\"data\", \"\");\n  if (!data) {\n    window.fetch(\"https://jsonplaceholder.typicode.com/photos\").then(\n      function (response) {\n        if (response.status !== 200) {\n          console.log('Looks like there was a problem. Status Code: ' +\n            response.status);\n          return;\n        }\n\n        // Examine the text in the response\n        response.json().then(function (data) {\n          setData(JSON.stringify(data));\n        });\n      }\n    )\n      .catch(function (err) {\n        console.log('Fetch Error :-S', err);\n      });\n  }\n\n  const shuffeBtn = function () {\n    if (data) {\n      const datalist = JSON.parse(data);\n      datalist.sort(() => Math.random() - 0.5);\n      setData(JSON.stringify(datalist));\n    }\n  }\n\n  const PhotoList = lazy(()=>import('./PhotoList'))\n\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<h1>Still Loadingâ€¦</h1>}>\n      <PhotoList data={data} />\n      </Suspense>\n      <br></br>\n      <br></br>\n      <button className=\"btn\" onClick={shuffeBtn}>Shuffe</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorker.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}